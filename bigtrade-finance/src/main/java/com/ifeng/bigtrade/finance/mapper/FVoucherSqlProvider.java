package com.ifeng.bigtrade.finance.mapper;

import com.ifeng.bigtrade.finance.entites.FVoucher;
import com.ifeng.bigtrade.finance.entites.FVoucherExample.Criteria;
import com.ifeng.bigtrade.finance.entites.FVoucherExample.Criterion;
import com.ifeng.bigtrade.finance.entites.enumf.EVoucherStatus;
import com.ifeng.bigtrade.finance.tools.CommUtil;
import com.ifeng.bigtrade.finance.entites.FVoucherExample;

import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FVoucherSqlProvider
{

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	public String countByExample(FVoucherExample example)
	{
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("f_voucher");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	public String deleteByExample(FVoucherExample example)
	{
		SQL sql = new SQL();
		sql.DELETE_FROM("f_voucher");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	public String insertSelective(FVoucher record)
	{
		SQL sql = new SQL();
		sql.INSERT_INTO("f_voucher");

		if (record.getId() != null)
		{
			sql.VALUES("id", "#{id,jdbcType=BIGINT}");
		}

		if (record.getAddTime() != null)
		{
			sql.VALUES("addTime", "#{addTime,jdbcType=TIMESTAMP}");
		}

		if (record.getDeleteStatus() != null)
		{
			sql.VALUES("deleteStatus", "#{deleteStatus,jdbcType=BIT}");
		}

		if (record.getVoucherNo() != null)
		{
			sql.VALUES("voucherNo", "#{voucherNo,jdbcType=VARCHAR}");
		}

		if (record.getSummary_id() != null)
		{
			sql.VALUES("summary_id", "#{summary_id,jdbcType=BIGINT}");
		}

		if (record.getContractNo() != null)
		{
			sql.VALUES("contractNo", "#{contractNo,jdbcType=VARCHAR}");
		}

		if (record.getStatus() != null)
		{
			sql.VALUES("status", "#{status,jdbcType=VARCHAR}");
		}

		if (record.getInputUser() != null)
		{
			sql.VALUES("inputUser", "#{inputUser,jdbcType=VARCHAR}");
		}

		if (record.getInputTime() != null)
		{
			sql.VALUES("inputTime", "#{inputTime,jdbcType=TIMESTAMP}");
		}

		if (record.getConfirmUser() != null)
		{
			sql.VALUES("confirmUser", "#{confirmUser,jdbcType=VARCHAR}");
		}

		if (record.getConfirmTime() != null)
		{
			sql.VALUES("confirmTime", "#{confirmTime,jdbcType=TIMESTAMP}");
		}

		if (record.getAuditor() != null)
		{
			sql.VALUES("auditor", "#{auditor,jdbcType=VARCHAR}");
		}

		if (record.getAuditTime() != null)
		{
			sql.VALUES("auditTime", "#{auditTime,jdbcType=TIMESTAMP}");
		}

		if (record.getB_date() != null)
		{
			sql.VALUES("b_date", "#{b_date,jdbcType=TIMESTAMP}");
		}

		if (record.getFundFlowId() != null)
		{
			sql.VALUES("fundFlowId", "#{fundFlowId,jdbcType=BIGINT}");
		}

		if (record.getNote() != null)
		{
			sql.VALUES("note", "#{note,jdbcType=LONGVARCHAR}");
		}

		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	public String selectByExampleWithBLOBs(FVoucherExample example)
	{
		SQL sql = new SQL();
		if (example != null && example.isDistinct())
		{
			sql.SELECT_DISTINCT("id");
		} else
		{
			sql.SELECT("id");
		}
		sql.SELECT("addTime");
		sql.SELECT("deleteStatus");
		sql.SELECT("voucherNo");
		sql.SELECT("summary_id");
		sql.SELECT("contractNo");
		sql.SELECT("status");
		sql.SELECT("inputUser");
		sql.SELECT("inputTime");
		sql.SELECT("confirmUser");
		sql.SELECT("confirmTime");
		sql.SELECT("auditor");
		sql.SELECT("auditTime");
		sql.SELECT("b_date");
		sql.SELECT("fundFlowId");
		sql.SELECT("note");
		sql.FROM("f_voucher");
		applyWhere(sql, example, false);

		if (example != null && example.getOrderByClause() != null)
		{
			sql.ORDER_BY(example.getOrderByClause());
		}

		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	public String selectByExample(FVoucherExample example)
	{
		SQL sql = new SQL();
		if (example != null && example.isDistinct())
		{
			sql.SELECT_DISTINCT("id");
		} else
		{
			sql.SELECT("id");
		}
		sql.SELECT("addTime");
		sql.SELECT("deleteStatus");
		sql.SELECT("voucherNo");
		sql.SELECT("summary_id");
		sql.SELECT("contractNo");
		sql.SELECT("status");
		sql.SELECT("inputUser");
		sql.SELECT("inputTime");
		sql.SELECT("confirmUser");
		sql.SELECT("confirmTime");
		sql.SELECT("auditor");
		sql.SELECT("auditTime");
		sql.SELECT("b_date");
		sql.SELECT("fundFlowId");
		sql.FROM("f_voucher");
		applyWhere(sql, example, false);

		if (example != null && example.getOrderByClause() != null)
		{
			sql.ORDER_BY(example.getOrderByClause());
		}

		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	public String updateByExampleSelective(Map<String, Object> parameter)
	{
		FVoucher record = (FVoucher) parameter.get("record");
		FVoucherExample example = (FVoucherExample) parameter.get("example");

		SQL sql = new SQL();
		sql.UPDATE("f_voucher");

		if (record.getId() != null)
		{
			sql.SET("id = #{record.id,jdbcType=BIGINT}");
		}

		if (record.getAddTime() != null)
		{
			sql.SET("addTime = #{record.addTime,jdbcType=TIMESTAMP}");
		}

		if (record.getDeleteStatus() != null)
		{
			sql.SET("deleteStatus = #{record.deleteStatus,jdbcType=BIT}");
		}

		if (record.getVoucherNo() != null)
		{
			sql.SET("voucherNo = #{record.voucherNo,jdbcType=VARCHAR}");
		}

		if (record.getSummary_id() != null)
		{
			sql.SET("summary_id = #{record.summary_id,jdbcType=BIGINT}");
		}

		if (record.getContractNo() != null)
		{
			sql.SET("contractNo = #{record.contractNo,jdbcType=VARCHAR}");
		}

		if (record.getStatus() != null)
		{
			sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		}

		if (record.getInputUser() != null)
		{
			sql.SET("inputUser = #{record.inputUser,jdbcType=VARCHAR}");
		}

		if (record.getInputTime() != null)
		{
			sql.SET("inputTime = #{record.inputTime,jdbcType=TIMESTAMP}");
		}

		if (record.getConfirmUser() != null)
		{
			sql.SET("confirmUser = #{record.confirmUser,jdbcType=VARCHAR}");
		}

		if (record.getConfirmTime() != null)
		{
			sql.SET("confirmTime = #{record.confirmTime,jdbcType=TIMESTAMP}");
		}

		if (record.getAuditor() != null)
		{
			sql.SET("auditor = #{record.auditor,jdbcType=VARCHAR}");
		}

		if (record.getAuditTime() != null)
		{
			sql.SET("auditTime = #{record.auditTime,jdbcType=TIMESTAMP}");
		}

		if (record.getB_date() != null)
		{
			sql.SET("b_date = #{record.b_date,jdbcType=TIMESTAMP}");
		}

		if (record.getFundFlowId() != null)
		{
			sql.SET("fundFlowId = #{record.fundFlowId,jdbcType=BIGINT}");
		}

		if (record.getNote() != null)
		{
			sql.SET("note = #{record.note,jdbcType=LONGVARCHAR}");
		}

		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	public String updateByExampleWithBLOBs(Map<String, Object> parameter)
	{
		SQL sql = new SQL();
		sql.UPDATE("f_voucher");

		sql.SET("id = #{record.id,jdbcType=BIGINT}");
		sql.SET("addTime = #{record.addTime,jdbcType=TIMESTAMP}");
		sql.SET("deleteStatus = #{record.deleteStatus,jdbcType=BIT}");
		sql.SET("voucherNo = #{record.voucherNo,jdbcType=VARCHAR}");
		sql.SET("summary_id = #{record.summary_id,jdbcType=BIGINT}");
		sql.SET("contractNo = #{record.contractNo,jdbcType=VARCHAR}");
		sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		sql.SET("inputUser = #{record.inputUser,jdbcType=VARCHAR}");
		sql.SET("inputTime = #{record.inputTime,jdbcType=TIMESTAMP}");
		sql.SET("confirmUser = #{record.confirmUser,jdbcType=VARCHAR}");
		sql.SET("confirmTime = #{record.confirmTime,jdbcType=TIMESTAMP}");
		sql.SET("auditor = #{record.auditor,jdbcType=VARCHAR}");
		sql.SET("auditTime = #{record.auditTime,jdbcType=TIMESTAMP}");
		sql.SET("b_date = #{record.b_date,jdbcType=TIMESTAMP}");
		sql.SET("fundFlowId = #{record.fundFlowId,jdbcType=BIGINT}");
		sql.SET("note = #{record.note,jdbcType=LONGVARCHAR}");

		FVoucherExample example = (FVoucherExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	public String updateByExample(Map<String, Object> parameter)
	{
		SQL sql = new SQL();
		sql.UPDATE("f_voucher");

		sql.SET("id = #{record.id,jdbcType=BIGINT}");
		sql.SET("addTime = #{record.addTime,jdbcType=TIMESTAMP}");
		sql.SET("deleteStatus = #{record.deleteStatus,jdbcType=BIT}");
		sql.SET("voucherNo = #{record.voucherNo,jdbcType=VARCHAR}");
		sql.SET("summary_id = #{record.summary_id,jdbcType=BIGINT}");
		sql.SET("contractNo = #{record.contractNo,jdbcType=VARCHAR}");
		sql.SET("status = #{record.status,jdbcType=VARCHAR}");
		sql.SET("inputUser = #{record.inputUser,jdbcType=VARCHAR}");
		sql.SET("inputTime = #{record.inputTime,jdbcType=TIMESTAMP}");
		sql.SET("confirmUser = #{record.confirmUser,jdbcType=VARCHAR}");
		sql.SET("confirmTime = #{record.confirmTime,jdbcType=TIMESTAMP}");
		sql.SET("auditor = #{record.auditor,jdbcType=VARCHAR}");
		sql.SET("auditTime = #{record.auditTime,jdbcType=TIMESTAMP}");
		sql.SET("b_date = #{record.b_date,jdbcType=TIMESTAMP}");
		sql.SET("fundFlowId = #{record.fundFlowId,jdbcType=BIGINT}");

		FVoucherExample example = (FVoucherExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	public String updateByPrimaryKeySelective(FVoucher record)
	{
		SQL sql = new SQL();
		sql.UPDATE("f_voucher");

		if (record.getAddTime() != null)
		{
			sql.SET("addTime = #{addTime,jdbcType=TIMESTAMP}");
		}

		if (record.getDeleteStatus() != null)
		{
			sql.SET("deleteStatus = #{deleteStatus,jdbcType=BIT}");
		}

		if (record.getVoucherNo() != null)
		{
			sql.SET("voucherNo = #{voucherNo,jdbcType=VARCHAR}");
		}

		if (record.getSummary_id() != null)
		{
			sql.SET("summary_id = #{summary_id,jdbcType=BIGINT}");
		}

		if (record.getContractNo() != null)
		{
			sql.SET("contractNo = #{contractNo,jdbcType=VARCHAR}");
		}

		if (record.getStatus() != null)
		{
			sql.SET("status = #{status,jdbcType=VARCHAR}");
		}

		if (record.getInputUser() != null)
		{
			sql.SET("inputUser = #{inputUser,jdbcType=VARCHAR}");
		}

		if (record.getInputTime() != null)
		{
			sql.SET("inputTime = #{inputTime,jdbcType=TIMESTAMP}");
		}

		if (record.getConfirmUser() != null)
		{
			sql.SET("confirmUser = #{confirmUser,jdbcType=VARCHAR}");
		}

		if (record.getConfirmTime() != null)
		{
			sql.SET("confirmTime = #{confirmTime,jdbcType=TIMESTAMP}");
		}

		if (record.getAuditor() != null)
		{
			sql.SET("auditor = #{auditor,jdbcType=VARCHAR}");
		}

		if (record.getAuditTime() != null)
		{
			sql.SET("auditTime = #{auditTime,jdbcType=TIMESTAMP}");
		}

		if (record.getB_date() != null)
		{
			sql.SET("b_date = #{b_date,jdbcType=TIMESTAMP}");
		}

		if (record.getFundFlowId() != null)
		{
			sql.SET("fundFlowId = #{fundFlowId,jdbcType=BIGINT}");
		}

		if (record.getNote() != null)
		{
			sql.SET("note = #{note,jdbcType=LONGVARCHAR}");
		}

		sql.WHERE("id = #{id,jdbcType=BIGINT}");

		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucher
	 *
	 * @mbg.generated Wed Aug 16 15:02:37 CST 2017
	 */
	protected void applyWhere(SQL sql, FVoucherExample example, boolean includeExamplePhrase)
	{
		if (example == null)
		{
			return;
		}

		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase)
		{
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else
		{
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}

		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++)
		{
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid())
			{
				if (firstCriteria)
				{
					firstCriteria = false;
				} else
				{
					sb.append(" or ");
				}

				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++)
				{
					Criterion criterion = criterions.get(j);
					if (firstCriterion)
					{
						firstCriterion = false;
					} else
					{
						sb.append(" and ");
					}

					if (criterion.isNoValue())
					{
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue())
					{
						if (criterion.getTypeHandler() == null)
						{
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else
						{
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue())
					{
						if (criterion.getTypeHandler() == null)
						{
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else
						{
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue())
					{
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++)
						{
							if (comma)
							{
								sb.append(", ");
							} else
							{
								comma = true;
							}
							if (criterion.getTypeHandler() == null)
							{
								sb.append(String.format(parmPhrase3, i, j, k));
							} else
							{
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}

		if (sb.length() > 0)
		{
			sql.WHERE(sb.toString());
		}
	}

	/******************* next new add ********************/
	/**
	 * 查询当前凭证
	 * 
	 * @param summaryno 摘要号
	 * @param summaryname 摘要名称
	 * @param status 状态
	 * @param inputuser 录入人
	 * @param inputtime 录入时间
	 * @param audittime 审核时间
	 * @param auditor 审核人
	 * @return
	 */
	public String selectCurrentVoucher(String summaryno, String summaryname, String status, String inputuser,
			String inputtime, String auditor, String audittime)
	{
		SQL sql = new SQL();
		sql.SELECT("v.*,s.summary,s.summaryNo").FROM("f_voucher v,f_summary s").WHERE("v.summary_id=s.id");
		if (CommUtil.isNotNull(summaryno))
		{
			sql.WHERE("s.summaryNo='" + summaryno + "'");
		}
		if (CommUtil.isNotNull(summaryname))
		{
			sql.WHERE("s.summary='" + summaryname + "'");
		}
		if (CommUtil.isNotNull(status))
		{
			sql.WHERE("v.status='" + status + "'");
		}
		if (CommUtil.isNotNull(auditor))
		{
			sql.WHERE("v.inputUser='" + inputuser + "'");
		}
		if (CommUtil.isNotNull(auditor))
		{
			sql.WHERE("v.auditor='" + auditor + "'");
		}
		if (CommUtil.isNotNull(inputtime))
		{
			if (inputtime.length() >= 10)
			{
				inputtime = inputtime.substring(0, 10);
				sql.WHERE("v.inputTime>='" + inputtime + " 00:00:00'");
				sql.WHERE("v.inputTime<='" + inputtime + " 23:59:59'");
			}
		}
		if (CommUtil.isNotNull(audittime))
		{
			if (audittime.length() >= 10)
			{
				audittime = audittime.substring(0, 10);
				sql.WHERE("v.auditTime>='" + audittime + " 00:00:00'");
				sql.WHERE("v.auditTime<='" + audittime + " 23:59:59'");
			}
		}
		sql.WHERE("v.status!='" + EVoucherStatus.accounted.getFlag() + "'");// 当前凭证不为已入账的凭证
		return sql.toString();
	}

	/**
	 * 查询历史凭证
	 * 
	 * @param summaryno 摘要号
	 * @param summaryname 摘要名称
	 * @param inputuser 录入员
	 * @param bdate 凭证归属时间
	 * @return
	 */
	public String selectHistoryVoucher(String summaryno, String summaryname, String inputuser, String bdate)
	{
		SQL sql = new SQL();
		sql.SELECT("v.*,s.summary,s.summaryNo").FROM("f_voucher v,f_summary s").WHERE("v.summary_id=s.id");
		if (CommUtil.isNotNull(summaryno))
		{
			sql.WHERE("s.summaryNo='" + summaryno + "'");
		}
		if (CommUtil.isNotNull(summaryname))
		{
			sql.WHERE("s.summary='" + summaryname + "'");
		}
		if (CommUtil.isNotNull(bdate))
		{
			if (bdate.length() >= 10)
			{
				bdate = bdate.substring(0, 10);
				sql.WHERE("v.b_date>='" + bdate + " 00:00:00'");
				sql.WHERE("v.b_date<='" + bdate + " 23:59:59'");
			}
		}
		sql.WHERE("v.status='" + EVoucherStatus.accounted.getFlag() + "'");// 历史凭证插查询accounted的凭证
		return sql.toString();
	}
}
package com.ifeng.bigtrade.finance.mapper;

import com.ifeng.bigtrade.finance.entites.FVoucherEntry;
import com.ifeng.bigtrade.finance.entites.FVoucherEntryExample.Criteria;
import com.ifeng.bigtrade.finance.entites.FVoucherEntryExample.Criterion;
import com.ifeng.bigtrade.finance.entites.FVoucherEntryExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class FVoucherEntrySqlProvider
{

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucherentry
	 *
	 * @mbg.generated Wed Aug 16 13:55:19 CST 2017
	 */
	public String countByExample(FVoucherEntryExample example)
	{
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("f_voucherentry");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucherentry
	 *
	 * @mbg.generated Wed Aug 16 13:55:19 CST 2017
	 */
	public String deleteByExample(FVoucherEntryExample example)
	{
		SQL sql = new SQL();
		sql.DELETE_FROM("f_voucherentry");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucherentry
	 *
	 * @mbg.generated Wed Aug 16 13:55:19 CST 2017
	 */
	public String insertSelective(FVoucherEntry record)
	{
		SQL sql = new SQL();
		sql.INSERT_INTO("f_voucherentry");

		if (record.getId() != null)
		{
			sql.VALUES("id", "#{id,jdbcType=BIGINT}");
		}

		if (record.getAddTime() != null)
		{
			sql.VALUES("addTime", "#{addTime,jdbcType=TIMESTAMP}");
		}

		if (record.getDeleteStatus() != null)
		{
			sql.VALUES("deleteStatus", "#{deleteStatus,jdbcType=BIT}");
		}

		if (record.getAccountCode() != null)
		{
			sql.VALUES("accountCode", "#{accountCode,jdbcType=VARCHAR}");
		}

		if (record.getAccountName() != null)
		{
			sql.VALUES("accountName", "#{accountName,jdbcType=VARCHAR}");
		}

		if (record.getCreditAmount() != null)
		{
			sql.VALUES("creditAmount", "#{creditAmount,jdbcType=DECIMAL}");
		}

		if (record.getDebitAmount() != null)
		{
			sql.VALUES("debitAmount", "#{debitAmount,jdbcType=DECIMAL}");
		}

		if (record.getVoucher_id() != null)
		{
			sql.VALUES("voucher_id", "#{voucher_id,jdbcType=BIGINT}");
		}

		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucherentry
	 *
	 * @mbg.generated Wed Aug 16 13:55:19 CST 2017
	 */
	public String selectByExample(FVoucherEntryExample example)
	{
		SQL sql = new SQL();
		if (example != null && example.isDistinct())
		{
			sql.SELECT_DISTINCT("id");
		} else
		{
			sql.SELECT("id");
		}
		sql.SELECT("addTime");
		sql.SELECT("deleteStatus");
		sql.SELECT("accountCode");
		sql.SELECT("accountName");
		sql.SELECT("creditAmount");
		sql.SELECT("debitAmount");
		sql.SELECT("voucher_id");
		sql.FROM("f_voucherentry");
		applyWhere(sql, example, false);

		if (example != null && example.getOrderByClause() != null)
		{
			sql.ORDER_BY(example.getOrderByClause());
		}

		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucherentry
	 *
	 * @mbg.generated Wed Aug 16 13:55:19 CST 2017
	 */
	public String updateByExampleSelective(Map<String, Object> parameter)
	{
		FVoucherEntry record = (FVoucherEntry) parameter.get("record");
		FVoucherEntryExample example = (FVoucherEntryExample) parameter.get("example");

		SQL sql = new SQL();
		sql.UPDATE("f_voucherentry");

		if (record.getId() != null)
		{
			sql.SET("id = #{record.id,jdbcType=BIGINT}");
		}

		if (record.getAddTime() != null)
		{
			sql.SET("addTime = #{record.addTime,jdbcType=TIMESTAMP}");
		}

		if (record.getDeleteStatus() != null)
		{
			sql.SET("deleteStatus = #{record.deleteStatus,jdbcType=BIT}");
		}

		if (record.getAccountCode() != null)
		{
			sql.SET("accountCode = #{record.accountCode,jdbcType=VARCHAR}");
		}

		if (record.getAccountName() != null)
		{
			sql.SET("accountName = #{record.accountName,jdbcType=VARCHAR}");
		}

		if (record.getCreditAmount() != null)
		{
			sql.SET("creditAmount = #{record.creditAmount,jdbcType=DECIMAL}");
		}

		if (record.getDebitAmount() != null)
		{
			sql.SET("debitAmount = #{record.debitAmount,jdbcType=DECIMAL}");
		}

		if (record.getVoucher_id() != null)
		{
			sql.SET("voucher_id = #{record.voucher_id,jdbcType=BIGINT}");
		}

		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucherentry
	 *
	 * @mbg.generated Wed Aug 16 13:55:19 CST 2017
	 */
	public String updateByExample(Map<String, Object> parameter)
	{
		SQL sql = new SQL();
		sql.UPDATE("f_voucherentry");

		sql.SET("id = #{record.id,jdbcType=BIGINT}");
		sql.SET("addTime = #{record.addTime,jdbcType=TIMESTAMP}");
		sql.SET("deleteStatus = #{record.deleteStatus,jdbcType=BIT}");
		sql.SET("accountCode = #{record.accountCode,jdbcType=VARCHAR}");
		sql.SET("accountName = #{record.accountName,jdbcType=VARCHAR}");
		sql.SET("creditAmount = #{record.creditAmount,jdbcType=DECIMAL}");
		sql.SET("debitAmount = #{record.debitAmount,jdbcType=DECIMAL}");
		sql.SET("voucher_id = #{record.voucher_id,jdbcType=BIGINT}");

		FVoucherEntryExample example = (FVoucherEntryExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucherentry
	 *
	 * @mbg.generated Wed Aug 16 13:55:19 CST 2017
	 */
	public String updateByPrimaryKeySelective(FVoucherEntry record)
	{
		SQL sql = new SQL();
		sql.UPDATE("f_voucherentry");

		if (record.getAddTime() != null)
		{
			sql.SET("addTime = #{addTime,jdbcType=TIMESTAMP}");
		}

		if (record.getDeleteStatus() != null)
		{
			sql.SET("deleteStatus = #{deleteStatus,jdbcType=BIT}");
		}

		if (record.getAccountCode() != null)
		{
			sql.SET("accountCode = #{accountCode,jdbcType=VARCHAR}");
		}

		if (record.getAccountName() != null)
		{
			sql.SET("accountName = #{accountName,jdbcType=VARCHAR}");
		}

		if (record.getCreditAmount() != null)
		{
			sql.SET("creditAmount = #{creditAmount,jdbcType=DECIMAL}");
		}

		if (record.getDebitAmount() != null)
		{
			sql.SET("debitAmount = #{debitAmount,jdbcType=DECIMAL}");
		}

		if (record.getVoucher_id() != null)
		{
			sql.SET("voucher_id = #{voucher_id,jdbcType=BIGINT}");
		}

		sql.WHERE("id = #{id,jdbcType=BIGINT}");

		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_voucherentry
	 *
	 * @mbg.generated Wed Aug 16 13:55:19 CST 2017
	 */
	protected void applyWhere(SQL sql, FVoucherEntryExample example, boolean includeExamplePhrase)
	{
		if (example == null)
		{
			return;
		}

		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase)
		{
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else
		{
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}

		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++)
		{
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid())
			{
				if (firstCriteria)
				{
					firstCriteria = false;
				} else
				{
					sb.append(" or ");
				}

				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++)
				{
					Criterion criterion = criterions.get(j);
					if (firstCriterion)
					{
						firstCriterion = false;
					} else
					{
						sb.append(" and ");
					}

					if (criterion.isNoValue())
					{
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue())
					{
						if (criterion.getTypeHandler() == null)
						{
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else
						{
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue())
					{
						if (criterion.getTypeHandler() == null)
						{
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else
						{
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue())
					{
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++)
						{
							if (comma)
							{
								sb.append(", ");
							} else
							{
								comma = true;
							}
							if (criterion.getTypeHandler() == null)
							{
								sb.append(String.format(parmPhrase3, i, j, k));
							} else
							{
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}

		if (sb.length() > 0)
		{
			sql.WHERE(sb.toString());
		}
	}
}
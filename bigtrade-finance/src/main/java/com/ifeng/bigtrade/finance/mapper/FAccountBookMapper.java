package com.ifeng.bigtrade.finance.mapper;

import com.ifeng.bigtrade.finance.entites.FAccountBook;
import com.ifeng.bigtrade.finance.entites.FAccountBookExample;
import com.ifeng.bigtrade.finance.entites.FAccountItem;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.ResultType;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface FAccountBookMapper
{
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@SelectProvider(type = FAccountBookSqlProvider.class, method = "countByExample")
	long countByExample(FAccountBookExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@DeleteProvider(type = FAccountBookSqlProvider.class, method = "deleteByExample")
	int deleteByExample(FAccountBookExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@Delete(
	{ "delete from f_accountbook", "where id = #{id,jdbcType=BIGINT}" })
	int deleteByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@Insert(
	{ "insert into f_accountbook (id, addTime, ", "deleteStatus, amount, ", "b_date, contractNo, ",
			"creditCode, debitCode, ", "summary, summaryNo, ", "voucher_id)",
			"values (#{id,jdbcType=BIGINT}, #{addTime,jdbcType=TIMESTAMP}, ",
			"#{deleteStatus,jdbcType=BIT}, #{amount,jdbcType=DECIMAL}, ",
			"#{b_date,jdbcType=TIMESTAMP}, #{contractNo,jdbcType=VARCHAR}, ",
			"#{creditCode,jdbcType=VARCHAR}, #{debitCode,jdbcType=VARCHAR}, ",
			"#{summary,jdbcType=VARCHAR}, #{summaryNo,jdbcType=VARCHAR}, ", "#{voucher_id,jdbcType=BIGINT})" })
	int insert(FAccountBook record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@InsertProvider(type = FAccountBookSqlProvider.class, method = "insertSelective")
	int insertSelective(FAccountBook record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@SelectProvider(type = FAccountBookSqlProvider.class, method = "selectByExample")
	@Results(
	{ @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
			@Result(column = "addTime", property = "addTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "deleteStatus", property = "deleteStatus", jdbcType = JdbcType.BIT),
			@Result(column = "amount", property = "amount", jdbcType = JdbcType.DECIMAL),
			@Result(column = "b_date", property = "b_date", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "contractNo", property = "contractNo", jdbcType = JdbcType.VARCHAR),
			@Result(column = "creditCode", property = "creditCode", jdbcType = JdbcType.VARCHAR),
			@Result(column = "debitCode", property = "debitCode", jdbcType = JdbcType.VARCHAR),
			@Result(column = "summary", property = "summary", jdbcType = JdbcType.VARCHAR),
			@Result(column = "summaryNo", property = "summaryNo", jdbcType = JdbcType.VARCHAR),
			@Result(column = "voucher_id", property = "voucher_id", jdbcType = JdbcType.BIGINT) })
	List<FAccountBook> selectByExample(FAccountBookExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@Select(
	{ "select", "id, addTime, deleteStatus, amount, b_date, contractNo, creditCode, debitCode, ",
			"summary, summaryNo, voucher_id", "from f_accountbook", "where id = #{id,jdbcType=BIGINT}" })
	@Results(
	{ @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
			@Result(column = "addTime", property = "addTime", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "deleteStatus", property = "deleteStatus", jdbcType = JdbcType.BIT),
			@Result(column = "amount", property = "amount", jdbcType = JdbcType.DECIMAL),
			@Result(column = "b_date", property = "b_date", jdbcType = JdbcType.TIMESTAMP),
			@Result(column = "contractNo", property = "contractNo", jdbcType = JdbcType.VARCHAR),
			@Result(column = "creditCode", property = "creditCode", jdbcType = JdbcType.VARCHAR),
			@Result(column = "debitCode", property = "debitCode", jdbcType = JdbcType.VARCHAR),
			@Result(column = "summary", property = "summary", jdbcType = JdbcType.VARCHAR),
			@Result(column = "summaryNo", property = "summaryNo", jdbcType = JdbcType.VARCHAR),
			@Result(column = "voucher_id", property = "voucher_id", jdbcType = JdbcType.BIGINT) })
	FAccountBook selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@UpdateProvider(type = FAccountBookSqlProvider.class, method = "updateByExampleSelective")
	int updateByExampleSelective(@Param("record") FAccountBook record, @Param("example") FAccountBookExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@UpdateProvider(type = FAccountBookSqlProvider.class, method = "updateByExample")
	int updateByExample(@Param("record") FAccountBook record, @Param("example") FAccountBookExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@UpdateProvider(type = FAccountBookSqlProvider.class, method = "updateByPrimaryKeySelective")
	int updateByPrimaryKeySelective(FAccountBook record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table f_accountbook
	 *
	 * @mbg.generated Wed Aug 23 18:05:52 CST 2017
	 */
	@Update(
	{ "update f_accountbook", "set addTime = #{addTime,jdbcType=TIMESTAMP},",
			"deleteStatus = #{deleteStatus,jdbcType=BIT},", "amount = #{amount,jdbcType=DECIMAL},",
			"b_date = #{b_date,jdbcType=TIMESTAMP},", "contractNo = #{contractNo,jdbcType=VARCHAR},",
			"creditCode = #{creditCode,jdbcType=VARCHAR},", "debitCode = #{debitCode,jdbcType=VARCHAR},",
			"summary = #{summary,jdbcType=VARCHAR},", "summaryNo = #{summaryNo,jdbcType=VARCHAR},",
			"voucher_id = #{voucher_id,jdbcType=BIGINT}", "where id = #{id,jdbcType=BIGINT}" })
	int updateByPrimaryKey(FAccountBook record);

	/******************* next new add *************************/
	@SelectProvider(type = FAccountBookSqlProvider.class, method = "selectAccountBook")
	@ResultType(HashMap.class)
	List<HashMap<String, Object>> selectAccountBook(String creditCode, String debitCode, String contractNo,
			String beginDate, String endDate, String voucherNo, Integer amount, String summaryNo,String summary);

	@SelectProvider(type = FAccountBookSqlProvider.class, method = "selectLedger")
	@ResultType(HashMap.class)
	List<HashMap<String, Object>> selectLedger(FAccountItem account, String accountCode, String beginDate,
			String endDate);

	@Insert(
	{ "	INSERT INTO f_accountbook (addTime, deleteStatus, b_date, summaryNo, summary , voucher_id, debitCode, creditCode, amount, contractNo) "
			+ "	SELECT #{nowDate}, 0, a.b_date, a.summaryNo, a.summary, a.voucherid, a.accountcode, b.accountcode, "
			+ "	CASE WHEN m.debitcount = n.creditcount THEN a.debitamount WHEN m.debitcount < n.creditcount THEN b.creditamount WHEN m.debitcount > n.creditcount THEN a.debitamount ELSE 0 END AS amount,"
			+ "	a.contractno FROM "
			+ "	(SELECT v.b_date AS b_date, s.summaryNo AS summaryNo, s.summary AS summary, v.id AS voucherid,"
			+ "	v.contractNo AS contractno , v.auditTime, ve.accountCode AS accountcode, ve.debitAmount AS debitamount "
			+ "	FROM f_voucher v, f_voucherentry ve, f_summary s  WHERE v.b_date >= #{b_date} AND"
			+ "	v.id = ve.voucher_id AND ve.debitAmount <> 0 AND v.summary_id = s.id ) a, "
			+ "	(SELECT v.id AS voucherid, ve.accountCode AS accountcode, ve.creditAmount AS creditamount "
			+ "	FROM f_voucher v, f_voucherentry ve WHERE v.b_date >= #{b_date} AND v.id = ve.voucher_id "
			+ "	AND ve.creditAmount <> 0) b, "
			+ "	(SELECT v.id AS voucherid, COUNT(*) AS debitcount FROM f_voucherentry ve, f_voucher v"
			+ "	WHERE ve.voucher_id = v.id AND v.b_date >= #{b_date} AND debitAmount <> 0 GROUP BY ve.voucher_id) m, "
			+ "	(SELECT v.id AS voucherid, COUNT(*) AS creditcount FROM f_voucherentry ve, f_voucher v "
			+ "	WHERE ve.voucher_id = v.id AND v.b_date >= #{b_date} AND creditAmount <> 0 GROUP BY ve.voucher_id) n "
			+ "	WHERE a.voucherid = b.voucherid AND a.voucherid = m.voucherid AND a.voucherid = n.voucherid" })
	int insertInSettleBalance(@Param("nowDate") Date nowDate, @Param("b_date") Date b_date);

	@Select(
	{ "select distinct b_date from f_accountbook where b_date >= #{time} order by b_date asc" })
	@ResultType(Date.class)
	List<Date> selectBdateGreatterThanDate(@Param("time") Date date);

	@Select(
	{ "select debitCode,sum(amount) amount from f_accountbook where b_date = #{v_curDate} group by debitCode" })
	@ResultType(HashMap.class)
	List<HashMap<String, Object>> selectDebitcodeAndAmount(@Param("v_curDate") Date v_curDate);

	@Select(
	{ "select creditCode,sum(amount) amount from f_accountbook where b_date = #{v_curDate} group by creditCode" })
	@ResultType(HashMap.class)
	List<HashMap<String, Object>> selectCreditcodeAndAmount(@Param("v_curDate") Date v_curDate);

	@SelectProvider(type = FAccountBookSqlProvider.class, method = "selectAccountLedgerTotal")
	@ResultType(HashMap.class)
	List<HashMap<String, Object>> selectAccountLedgerTotal(FAccountItem account, String accountCode, String beginDate,
			String endDate);

	@Select(
	{ "select b4.code,b4.name,b4.dcflag,ifnull(b2.lastdaybalance,0) as lastdaybalance,ifnull(b3.todaybalance,0) as todaybalance,",
			"ifnull(b3.debitAmount,0) as debitAmount,ifnull(b3.creditAmount,0) as creditAmount ", "from ",
			"(select min(t.b_date) as mindate,max(b_date) as maxdate,accountcode ", "from f_dailybalance t ",
			"where t.b_date>=#{beginDate} and t.b_date<=#{endDate} and t.accountcode=#{accountCode} ",
			"group by accountcode) b1,(select lastdaybalance,b_date ",
			"from f_dailybalance where accountcode=#{accountCode} ) b2,(select todaybalance,debitAmount,creditAmount,b_date ",
			"from f_dailybalance where accountcode=#{accountCode}) b3, (select * from f_accountitem where code=#{accountCode} ) b4 ",
			"where b1.mindate=b2.b_date and b1.maxdate=b3.b_date and b1.accountcode=b4.code" })
	@ResultType(HashMap.class)
	HashMap<String, Object> queryAccountBalance(@Param("accountCode")String accountCode,@Param("beginDate") String beginDate,@Param("endDate") String endDate);
}
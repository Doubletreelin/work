package com.ifeng.bigtrade.purchasing.mapper;

import com.ifeng.bigtrade.purchasing.entites.PIssuancePlan;
import com.ifeng.bigtrade.purchasing.entites.PIssuancePlanExample.Criteria;
import com.ifeng.bigtrade.purchasing.entites.PIssuancePlanExample.Criterion;
import com.ifeng.bigtrade.purchasing.tools.CommUtil;
import com.ifeng.bigtrade.purchasing.entites.PIssuancePlanExample;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.jdbc.SQL;

public class PIssuancePlanSqlProvider
{

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	public String countByExample(PIssuancePlanExample example)
	{
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("p_issuanceplan");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	public String deleteByExample(PIssuancePlanExample example)
	{
		SQL sql = new SQL();
		sql.DELETE_FROM("p_issuanceplan");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	public String insertSelective(PIssuancePlan record)
	{
		SQL sql = new SQL();
		sql.INSERT_INTO("p_issuanceplan");
		if (record.getId() != null)
		{
			sql.VALUES("id", "#{id,jdbcType=BIGINT}");
		}
		if (record.getAddTime() != null)
		{
			sql.VALUES("addTime", "#{addTime,jdbcType=TIMESTAMP}");
		}
		if (record.getDeleteStatus() != null)
		{
			sql.VALUES("deleteStatus", "#{deleteStatus,jdbcType=BIT}");
		}
		if (record.getCommodityId() != null)
		{
			sql.VALUES("commodityId", "#{commodityId,jdbcType=BIGINT}");
		}
		if (record.getCommodityName() != null)
		{
			sql.VALUES("commodityName", "#{commodityName,jdbcType=VARCHAR}");
		}
		if (record.getPlanStartTime() != null)
		{
			sql.VALUES("planStartTime", "#{planStartTime,jdbcType=TIMESTAMP}");
		}
		if (record.getPlanEndTime() != null)
		{
			sql.VALUES("planEndTime", "#{planEndTime,jdbcType=TIMESTAMP}");
		}
		if (record.getPublicityStartTime() != null)
		{
			sql.VALUES("publicityStartTime", "#{publicityStartTime,jdbcType=TIMESTAMP}");
		}
		if (record.getStatus() != null)
		{
			sql.VALUES("status", "#{status,jdbcType=INTEGER}");
		}
		if (record.getTotalQuantity() != null)
		{
			sql.VALUES("totalQuantity", "#{totalQuantity,jdbcType=INTEGER}");
		}
		if (record.getMaxSingleWinningCount() != null)
		{
			sql.VALUES("maxSingleWinningCount", "#{maxSingleWinningCount,jdbcType=INTEGER}");
		}
		if (record.getUnitPrice() != null)
		{
			sql.VALUES("unitPrice", "#{unitPrice,jdbcType=DECIMAL}");
		}
		if (record.getPublisherId() != null)
		{
			sql.VALUES("publisherId", "#{publisherId,jdbcType=BIGINT}");
		}
		if (record.getBrokerageType() != null)
		{
			sql.VALUES("brokerageType", "#{brokerageType,jdbcType=INTEGER}");
		}
		if (record.getBrokerage() != null)
		{
			sql.VALUES("brokerage", "#{brokerage,jdbcType=DECIMAL}");
		}
		if (record.getOperatorId() != null)
		{
			sql.VALUES("operatorId", "#{operatorId,jdbcType=BIGINT}");
		}
		if (record.getOperatorName() != null)
		{
			sql.VALUES("operatorName", "#{operatorName,jdbcType=VARCHAR}");
		}
		if (record.getOperatorIp() != null)
		{
			sql.VALUES("operatorIp", "#{operatorIp,jdbcType=VARCHAR}");
		}
		if (record.getApplicationCount() != null)
		{
			sql.VALUES("applicationCount", "#{applicationCount,jdbcType=INTEGER}");
		}
		if (record.getAllocateUserId() != null)
		{
			sql.VALUES("allocateUserId", "#{allocateUserId,jdbcType=BIGINT}");
		}
		if (record.getAllocateUserName() != null)
		{
			sql.VALUES("allocateUserName", "#{allocateUserName,jdbcType=VARCHAR}");
		}
		if (record.getAllocateUserIp() != null)
		{
			sql.VALUES("allocateUserIp", "#{allocateUserIp,jdbcType=VARCHAR}");
		}
		if (record.getMaxApplicationCount() != null)
		{
			sql.VALUES("maxApplicationCount", "#{maxApplicationCount,jdbcType=INTEGER}");
		}
		if (record.getAuditorId() != null)
		{
			sql.VALUES("auditorId", "#{auditorId,jdbcType=BIGINT}");
		}
		if (record.getAuditorName() != null)
		{
			sql.VALUES("auditorName", "#{auditorName,jdbcType=VARCHAR}");
		}
		if (record.getAuditorIp() != null)
		{
			sql.VALUES("auditorIp", "#{auditorIp,jdbcType=VARCHAR}");
		}
		if (record.getLotteryTime() != null)
		{
			sql.VALUES("lotteryTime", "#{lotteryTime,jdbcType=TIMESTAMP}");
		}
		if (record.getPublicityEndTime() != null)
		{
			sql.VALUES("publicityEndTime", "#{publicityEndTime,jdbcType=TIMESTAMP}");
		}
		if (record.getNotes() != null)
		{
			sql.VALUES("notes", "#{notes,jdbcType=LONGVARCHAR}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	public String selectByExampleWithBLOBs(PIssuancePlanExample example)
	{
		SQL sql = new SQL();
		if (example != null && example.isDistinct())
		{
			sql.SELECT_DISTINCT("id");
		} else
		{
			sql.SELECT("id");
		}
		sql.SELECT("addTime");
		sql.SELECT("deleteStatus");
		sql.SELECT("commodityId");
		sql.SELECT("commodityName");
		sql.SELECT("planStartTime");
		sql.SELECT("planEndTime");
		sql.SELECT("publicityStartTime");
		sql.SELECT("status");
		sql.SELECT("totalQuantity");
		sql.SELECT("maxSingleWinningCount");
		sql.SELECT("unitPrice");
		sql.SELECT("publisherId");
		sql.SELECT("brokerageType");
		sql.SELECT("brokerage");
		sql.SELECT("operatorId");
		sql.SELECT("operatorName");
		sql.SELECT("operatorIp");
		sql.SELECT("applicationCount");
		sql.SELECT("allocateUserId");
		sql.SELECT("allocateUserName");
		sql.SELECT("allocateUserIp");
		sql.SELECT("maxApplicationCount");
		sql.SELECT("auditorId");
		sql.SELECT("auditorName");
		sql.SELECT("auditorIp");
		sql.SELECT("lotteryTime");
		sql.SELECT("publicityEndTime");
		sql.SELECT("notes");
		sql.FROM("p_issuanceplan");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null)
		{
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	public String selectByExample(PIssuancePlanExample example)
	{
		SQL sql = new SQL();
		if (example != null && example.isDistinct())
		{
			sql.SELECT_DISTINCT("id");
		} else
		{
			sql.SELECT("id");
		}
		sql.SELECT("addTime");
		sql.SELECT("deleteStatus");
		sql.SELECT("commodityId");
		sql.SELECT("commodityName");
		sql.SELECT("planStartTime");
		sql.SELECT("planEndTime");
		sql.SELECT("publicityStartTime");
		sql.SELECT("status");
		sql.SELECT("totalQuantity");
		sql.SELECT("maxSingleWinningCount");
		sql.SELECT("unitPrice");
		sql.SELECT("publisherId");
		sql.SELECT("brokerageType");
		sql.SELECT("brokerage");
		sql.SELECT("operatorId");
		sql.SELECT("operatorName");
		sql.SELECT("operatorIp");
		sql.SELECT("applicationCount");
		sql.SELECT("allocateUserId");
		sql.SELECT("allocateUserName");
		sql.SELECT("allocateUserIp");
		sql.SELECT("maxApplicationCount");
		sql.SELECT("auditorId");
		sql.SELECT("auditorName");
		sql.SELECT("auditorIp");
		sql.SELECT("lotteryTime");
		sql.SELECT("publicityEndTime");
		sql.FROM("p_issuanceplan");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null)
		{
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	public String updateByExampleSelective(Map<String, Object> parameter)
	{
		PIssuancePlan record = (PIssuancePlan) parameter.get("record");
		PIssuancePlanExample example = (PIssuancePlanExample) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("p_issuanceplan");
		if (record.getId() != null)
		{
			sql.SET("id = #{record.id,jdbcType=BIGINT}");
		}
		if (record.getAddTime() != null)
		{
			sql.SET("addTime = #{record.addTime,jdbcType=TIMESTAMP}");
		}
		if (record.getDeleteStatus() != null)
		{
			sql.SET("deleteStatus = #{record.deleteStatus,jdbcType=BIT}");
		}
		if (record.getCommodityId() != null)
		{
			sql.SET("commodityId = #{record.commodityId,jdbcType=BIGINT}");
		}
		if (record.getCommodityName() != null)
		{
			sql.SET("commodityName = #{record.commodityName,jdbcType=VARCHAR}");
		}
		if (record.getPlanStartTime() != null)
		{
			sql.SET("planStartTime = #{record.planStartTime,jdbcType=TIMESTAMP}");
		}
		if (record.getPlanEndTime() != null)
		{
			sql.SET("planEndTime = #{record.planEndTime,jdbcType=TIMESTAMP}");
		}
		if (record.getPublicityStartTime() != null)
		{
			sql.SET("publicityStartTime = #{record.publicityStartTime,jdbcType=TIMESTAMP}");
		}
		if (record.getStatus() != null)
		{
			sql.SET("status = #{record.status,jdbcType=INTEGER}");
		}
		if (record.getTotalQuantity() != null)
		{
			sql.SET("totalQuantity = #{record.totalQuantity,jdbcType=INTEGER}");
		}
		if (record.getMaxSingleWinningCount() != null)
		{
			sql.SET("maxSingleWinningCount = #{record.maxSingleWinningCount,jdbcType=INTEGER}");
		}
		if (record.getUnitPrice() != null)
		{
			sql.SET("unitPrice = #{record.unitPrice,jdbcType=DECIMAL}");
		}
		if (record.getPublisherId() != null)
		{
			sql.SET("publisherId = #{record.publisherId,jdbcType=BIGINT}");
		}
		if (record.getBrokerageType() != null)
		{
			sql.SET("brokerageType = #{record.brokerageType,jdbcType=INTEGER}");
		}
		if (record.getBrokerage() != null)
		{
			sql.SET("brokerage = #{record.brokerage,jdbcType=DECIMAL}");
		}
		if (record.getOperatorId() != null)
		{
			sql.SET("operatorId = #{record.operatorId,jdbcType=BIGINT}");
		}
		if (record.getOperatorName() != null)
		{
			sql.SET("operatorName = #{record.operatorName,jdbcType=VARCHAR}");
		}
		if (record.getOperatorIp() != null)
		{
			sql.SET("operatorIp = #{record.operatorIp,jdbcType=VARCHAR}");
		}
		if (record.getApplicationCount() != null)
		{
			sql.SET("applicationCount = #{record.applicationCount,jdbcType=INTEGER}");
		}
		if (record.getAllocateUserId() != null)
		{
			sql.SET("allocateUserId = #{record.allocateUserId,jdbcType=BIGINT}");
		}
		if (record.getAllocateUserName() != null)
		{
			sql.SET("allocateUserName = #{record.allocateUserName,jdbcType=VARCHAR}");
		}
		if (record.getAllocateUserIp() != null)
		{
			sql.SET("allocateUserIp = #{record.allocateUserIp,jdbcType=VARCHAR}");
		}
		if (record.getMaxApplicationCount() != null)
		{
			sql.SET("maxApplicationCount = #{record.maxApplicationCount,jdbcType=INTEGER}");
		}
		if (record.getAuditorId() != null)
		{
			sql.SET("auditorId = #{record.auditorId,jdbcType=BIGINT}");
		}
		if (record.getAuditorName() != null)
		{
			sql.SET("auditorName = #{record.auditorName,jdbcType=VARCHAR}");
		}
		if (record.getAuditorIp() != null)
		{
			sql.SET("auditorIp = #{record.auditorIp,jdbcType=VARCHAR}");
		}
		if (record.getLotteryTime() != null)
		{
			sql.SET("lotteryTime = #{record.lotteryTime,jdbcType=TIMESTAMP}");
		}
		if (record.getPublicityEndTime() != null)
		{
			sql.SET("publicityEndTime = #{record.publicityEndTime,jdbcType=TIMESTAMP}");
		}
		if (record.getNotes() != null)
		{
			sql.SET("notes = #{record.notes,jdbcType=LONGVARCHAR}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	public String updateByExampleWithBLOBs(Map<String, Object> parameter)
	{
		SQL sql = new SQL();
		sql.UPDATE("p_issuanceplan");
		sql.SET("id = #{record.id,jdbcType=BIGINT}");
		sql.SET("addTime = #{record.addTime,jdbcType=TIMESTAMP}");
		sql.SET("deleteStatus = #{record.deleteStatus,jdbcType=BIT}");
		sql.SET("commodityId = #{record.commodityId,jdbcType=BIGINT}");
		sql.SET("commodityName = #{record.commodityName,jdbcType=VARCHAR}");
		sql.SET("planStartTime = #{record.planStartTime,jdbcType=TIMESTAMP}");
		sql.SET("planEndTime = #{record.planEndTime,jdbcType=TIMESTAMP}");
		sql.SET("publicityStartTime = #{record.publicityStartTime,jdbcType=TIMESTAMP}");
		sql.SET("status = #{record.status,jdbcType=INTEGER}");
		sql.SET("totalQuantity = #{record.totalQuantity,jdbcType=INTEGER}");
		sql.SET("maxSingleWinningCount = #{record.maxSingleWinningCount,jdbcType=INTEGER}");
		sql.SET("unitPrice = #{record.unitPrice,jdbcType=DECIMAL}");
		sql.SET("publisherId = #{record.publisherId,jdbcType=BIGINT}");
		sql.SET("brokerageType = #{record.brokerageType,jdbcType=INTEGER}");
		sql.SET("brokerage = #{record.brokerage,jdbcType=DECIMAL}");
		sql.SET("operatorId = #{record.operatorId,jdbcType=BIGINT}");
		sql.SET("operatorName = #{record.operatorName,jdbcType=VARCHAR}");
		sql.SET("operatorIp = #{record.operatorIp,jdbcType=VARCHAR}");
		sql.SET("applicationCount = #{record.applicationCount,jdbcType=INTEGER}");
		sql.SET("allocateUserId = #{record.allocateUserId,jdbcType=BIGINT}");
		sql.SET("allocateUserName = #{record.allocateUserName,jdbcType=VARCHAR}");
		sql.SET("allocateUserIp = #{record.allocateUserIp,jdbcType=VARCHAR}");
		sql.SET("maxApplicationCount = #{record.maxApplicationCount,jdbcType=INTEGER}");
		sql.SET("auditorId = #{record.auditorId,jdbcType=BIGINT}");
		sql.SET("auditorName = #{record.auditorName,jdbcType=VARCHAR}");
		sql.SET("auditorIp = #{record.auditorIp,jdbcType=VARCHAR}");
		sql.SET("lotteryTime = #{record.lotteryTime,jdbcType=TIMESTAMP}");
		sql.SET("publicityEndTime = #{record.publicityEndTime,jdbcType=TIMESTAMP}");
		sql.SET("notes = #{record.notes,jdbcType=LONGVARCHAR}");
		PIssuancePlanExample example = (PIssuancePlanExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	public String updateByExample(Map<String, Object> parameter)
	{
		SQL sql = new SQL();
		sql.UPDATE("p_issuanceplan");
		sql.SET("id = #{record.id,jdbcType=BIGINT}");
		sql.SET("addTime = #{record.addTime,jdbcType=TIMESTAMP}");
		sql.SET("deleteStatus = #{record.deleteStatus,jdbcType=BIT}");
		sql.SET("commodityId = #{record.commodityId,jdbcType=BIGINT}");
		sql.SET("commodityName = #{record.commodityName,jdbcType=VARCHAR}");
		sql.SET("planStartTime = #{record.planStartTime,jdbcType=TIMESTAMP}");
		sql.SET("planEndTime = #{record.planEndTime,jdbcType=TIMESTAMP}");
		sql.SET("publicityStartTime = #{record.publicityStartTime,jdbcType=TIMESTAMP}");
		sql.SET("status = #{record.status,jdbcType=INTEGER}");
		sql.SET("totalQuantity = #{record.totalQuantity,jdbcType=INTEGER}");
		sql.SET("maxSingleWinningCount = #{record.maxSingleWinningCount,jdbcType=INTEGER}");
		sql.SET("unitPrice = #{record.unitPrice,jdbcType=DECIMAL}");
		sql.SET("publisherId = #{record.publisherId,jdbcType=BIGINT}");
		sql.SET("brokerageType = #{record.brokerageType,jdbcType=INTEGER}");
		sql.SET("brokerage = #{record.brokerage,jdbcType=DECIMAL}");
		sql.SET("operatorId = #{record.operatorId,jdbcType=BIGINT}");
		sql.SET("operatorName = #{record.operatorName,jdbcType=VARCHAR}");
		sql.SET("operatorIp = #{record.operatorIp,jdbcType=VARCHAR}");
		sql.SET("applicationCount = #{record.applicationCount,jdbcType=INTEGER}");
		sql.SET("allocateUserId = #{record.allocateUserId,jdbcType=BIGINT}");
		sql.SET("allocateUserName = #{record.allocateUserName,jdbcType=VARCHAR}");
		sql.SET("allocateUserIp = #{record.allocateUserIp,jdbcType=VARCHAR}");
		sql.SET("maxApplicationCount = #{record.maxApplicationCount,jdbcType=INTEGER}");
		sql.SET("auditorId = #{record.auditorId,jdbcType=BIGINT}");
		sql.SET("auditorName = #{record.auditorName,jdbcType=VARCHAR}");
		sql.SET("auditorIp = #{record.auditorIp,jdbcType=VARCHAR}");
		sql.SET("lotteryTime = #{record.lotteryTime,jdbcType=TIMESTAMP}");
		sql.SET("publicityEndTime = #{record.publicityEndTime,jdbcType=TIMESTAMP}");
		PIssuancePlanExample example = (PIssuancePlanExample) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	public String updateByPrimaryKeySelective(PIssuancePlan record)
	{
		SQL sql = new SQL();
		sql.UPDATE("p_issuanceplan");
		if (record.getAddTime() != null)
		{
			sql.SET("addTime = #{addTime,jdbcType=TIMESTAMP}");
		}
		if (record.getDeleteStatus() != null)
		{
			sql.SET("deleteStatus = #{deleteStatus,jdbcType=BIT}");
		}
		if (record.getCommodityId() != null)
		{
			sql.SET("commodityId = #{commodityId,jdbcType=BIGINT}");
		}
		if (record.getCommodityName() != null)
		{
			sql.SET("commodityName = #{commodityName,jdbcType=VARCHAR}");
		}
		if (record.getPlanStartTime() != null)
		{
			sql.SET("planStartTime = #{planStartTime,jdbcType=TIMESTAMP}");
		}
		if (record.getPlanEndTime() != null)
		{
			sql.SET("planEndTime = #{planEndTime,jdbcType=TIMESTAMP}");
		}
		if (record.getPublicityStartTime() != null)
		{
			sql.SET("publicityStartTime = #{publicityStartTime,jdbcType=TIMESTAMP}");
		}
		if (record.getStatus() != null)
		{
			sql.SET("status = #{status,jdbcType=INTEGER}");
		}
		if (record.getTotalQuantity() != null)
		{
			sql.SET("totalQuantity = #{totalQuantity,jdbcType=INTEGER}");
		}
		if (record.getMaxSingleWinningCount() != null)
		{
			sql.SET("maxSingleWinningCount = #{maxSingleWinningCount,jdbcType=INTEGER}");
		}
		if (record.getUnitPrice() != null)
		{
			sql.SET("unitPrice = #{unitPrice,jdbcType=DECIMAL}");
		}
		if (record.getPublisherId() != null)
		{
			sql.SET("publisherId = #{publisherId,jdbcType=BIGINT}");
		}
		if (record.getBrokerageType() != null)
		{
			sql.SET("brokerageType = #{brokerageType,jdbcType=INTEGER}");
		}
		if (record.getBrokerage() != null)
		{
			sql.SET("brokerage = #{brokerage,jdbcType=DECIMAL}");
		}
		if (record.getOperatorId() != null)
		{
			sql.SET("operatorId = #{operatorId,jdbcType=BIGINT}");
		}
		if (record.getOperatorName() != null)
		{
			sql.SET("operatorName = #{operatorName,jdbcType=VARCHAR}");
		}
		if (record.getOperatorIp() != null)
		{
			sql.SET("operatorIp = #{operatorIp,jdbcType=VARCHAR}");
		}
		if (record.getApplicationCount() != null)
		{
			sql.SET("applicationCount = #{applicationCount,jdbcType=INTEGER}");
		}
		if (record.getAllocateUserId() != null)
		{
			sql.SET("allocateUserId = #{allocateUserId,jdbcType=BIGINT}");
		}
		if (record.getAllocateUserName() != null)
		{
			sql.SET("allocateUserName = #{allocateUserName,jdbcType=VARCHAR}");
		}
		if (record.getAllocateUserIp() != null)
		{
			sql.SET("allocateUserIp = #{allocateUserIp,jdbcType=VARCHAR}");
		}
		if (record.getMaxApplicationCount() != null)
		{
			sql.SET("maxApplicationCount = #{maxApplicationCount,jdbcType=INTEGER}");
		}
		if (record.getAuditorId() != null)
		{
			sql.SET("auditorId = #{auditorId,jdbcType=BIGINT}");
		}
		if (record.getAuditorName() != null)
		{
			sql.SET("auditorName = #{auditorName,jdbcType=VARCHAR}");
		}
		if (record.getAuditorIp() != null)
		{
			sql.SET("auditorIp = #{auditorIp,jdbcType=VARCHAR}");
		}
		if (record.getLotteryTime() != null)
		{
			sql.SET("lotteryTime = #{lotteryTime,jdbcType=TIMESTAMP}");
		}
		if (record.getPublicityEndTime() != null)
		{
			sql.SET("publicityEndTime = #{publicityEndTime,jdbcType=TIMESTAMP}");
		}
		if (record.getNotes() != null)
		{
			sql.SET("notes = #{notes,jdbcType=LONGVARCHAR}");
		}
		sql.WHERE("id = #{id,jdbcType=BIGINT}");
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to
	 * the database table p_issuanceplan
	 * 
	 * @mbg.generated Fri Nov 03 10:04:46 CST 2017
	 */
	protected void applyWhere(SQL sql, PIssuancePlanExample example, boolean includeExamplePhrase)
	{
		if (example == null)
		{
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase)
		{
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else
		{
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++)
		{
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid())
			{
				if (firstCriteria)
				{
					firstCriteria = false;
				} else
				{
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++)
				{
					Criterion criterion = criterions.get(j);
					if (firstCriterion)
					{
						firstCriterion = false;
					} else
					{
						sb.append(" and ");
					}
					if (criterion.isNoValue())
					{
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue())
					{
						if (criterion.getTypeHandler() == null)
						{
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else
						{
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue())
					{
						if (criterion.getTypeHandler() == null)
						{
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else
						{
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue())
					{
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++)
						{
							if (comma)
							{
								sb.append(", ");
							} else
							{
								comma = true;
							}
							if (criterion.getTypeHandler() == null)
							{
								sb.append(String.format(parmPhrase3, i, j, k));
							} else
							{
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0)
		{
			sql.WHERE(sb.toString());
		}
	}

	public String selectIssuance(Long commodityId, String startTime, String status, String commodityName)
	{
		StringBuffer sql = new StringBuffer();
		sql.append(
				"SELECT i.*, IFNULL((SELECT SUM(count) FROM p_applicationdetail a where a.`status` = 1 and a.issuanceplan_id = i.id),0) as count FROM p_issuanceplan i where 1=1 ");
		if (CommUtil.isNotNull(commodityId))
		{
			sql.append(" and commodityId=" + commodityId);
		}
		if (CommUtil.isNotNull(startTime))
		{
			sql.append(" and planStartTime>='" + CommUtil.addHmsForDate(startTime, "00:00:00")
					+ "' and planStartTime<='" + CommUtil.addHmsForDate(startTime, "23:59:59") + "'");
		}
		if (CommUtil.isNotNull(status))
		{
			sql.append(" and status in( " + status + ")");
		}
		if (CommUtil.isNotNull(commodityName))
		{
			sql.append(" and commodityName = '" + commodityName + "'");
		}
		return sql.toString();
	}

	public String selectIssuanceForUserShow(Long commodityId, String status)
	{
		StringBuffer sql = new StringBuffer();
		sql.append(
				"SELECT i.*, IFNULL((SELECT SUM(count) FROM p_applicationdetail a where a.`status` = 1 and a.issuanceplan_id = i.id),0) as count FROM p_issuanceplan i where 1=1 ");
		if (CommUtil.isNotNull(commodityId))
		{
			sql.append(" and commodityId=" + commodityId);
		}
		if (CommUtil.isNotNull(status))
		{
			sql.append(" and status in( " + status + ")");
		}
		String now = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
		sql.append(
				" and (" + "(publicityStartTime <='" + now + "') " + "or " + "(planStartTime <='" + now + "')" + ") ");

		return sql.toString();
	}
}